<%
  require 'json'
  require 'yaml'

  def task(name, file, binding)
    {
      task: name,
      config: YAML.load(ERB.new(File.read(file)).result(binding))
    }.to_json
  end

  def emit_datadog_metric(name, value)
    task(
      "emit-datadog-metric-#{name}",
      'tasks/emit_datadog_metric.yml.erb',
      binding
    )
  end
%>
resource_types:
- name: github-release
  type: registry-image
  source:
    repository: concourse/github-release-resource

resources:
- name: ((interval))
  type: time
  source:
    interval: ((interval))

- name: fly
  type: github-release
  check_every: 1h
  source:
    user: concourse
    repository: concourse
    access_token: ((github_access_token))

- name: oxygen-mask
  type: git
  source:
    uri: https://github.com/concourse/oxygen-mask

jobs:
- name: fly-hijack-failing-build
  build_logs_to_retain: 20
  serial: true
  plan:
  - get: ((interval))
    trigger: true
  - get: fly
    params: {globs: [fly-linux-amd64.tgz]}
  - task: trigger-and-wait-for-a-build
    config:
      image_resource:
        type: registry-image
        source:
          repository: concourse/atc-ci
      inputs:
      - name: fly
      params:
        ATC_URL: ((atc_url))
        TEAM_NAME: ((team_name))
        PIPELINE_NAME: ((pipeline_name))
        USERNAME: ((username))
        PASSWORD: ((password))

      platform: linux

      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash

          set -e

          tar -zxf fly/fly-linux-amd64.tgz -C fly/
          install fly/fly /usr/bin/fly

          job_name="$PIPELINE_NAME/failing"

          fly -t ci login -c $ATC_URL -n $TEAM_NAME -u $USERNAME -p $PASSWORD -k || {
              curl "$ATC_URL/api/v1/cli?arch=amd64&platform=linux" --output /tmp/fly

              install /tmp/fly /usr/bin/fly

              fly -t ci login -c $ATC_URL -n $TEAM_NAME -u $USERNAME -p $PASSWORD -k
          }
          fly -t ci sync
          fly -t ci trigger-job -j "$job_name" -w || true
          timeout 5 fly -t ci hijack \
            -j "$job_name" \
            -b $(fly -t ci builds -j "$job_name" | head -1 | awk '{print $3}') \
            echo Hello World

  on_failure: <%= emit_datadog_metric('concourse.fly_hijack_failing_build', 0) %>
  on_success: <%= emit_datadog_metric('concourse.fly_hijack_failing_build', 1) %>

- name: run-existing-pipeline
  build_logs_to_retain: 20
  serial: true
  plan:
  - get: ((interval))
    trigger: true
  - get: fly
    params: {globs: [fly-linux-amd64.tgz]}
  - task: trigger-and-wait-for-a-build
    config:
      image_resource:
        type: registry-image
        source:
          repository: concourse/atc-ci
      inputs:
      - name: fly
      params:
        ATC_URL: ((atc_url))
        TEAM_NAME: ((team_name))
        PIPELINE_NAME: ((pipeline_name))
        USERNAME: ((username))
        PASSWORD: ((password))

      platform: linux

      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash

          set -euo pipefail

          tar -zxf fly/fly-linux-amd64.tgz -C fly/
          install fly/fly /usr/bin/fly

          fly -t ci login -c $ATC_URL -n $TEAM_NAME -u $USERNAME -p $PASSWORD -k || {
              curl "$ATC_URL/api/v1/cli?arch=amd64&platform=linux" --output /tmp/fly

              install /tmp/fly /usr/bin/fly

              fly -t ci login -c $ATC_URL -n $TEAM_NAME -u $USERNAME -p $PASSWORD -k
          }
          fly -t ci sync
          build_number=$(timeout 5 fly -t ci trigger-job -j "$PIPELINE_NAME/simple-job" | cut -d'#' -f 2)
          timeout 60 fly -t ci watch -j "$PIPELINE_NAME/simple-job" -b "$build_number"
  on_failure: <%= emit_datadog_metric('concourse.run_existing_pipeline', 0) %>
  on_success: <%= emit_datadog_metric('concourse.run_existing_pipeline', 1) %>

- name: view-public-pipeline
  build_logs_to_retain: 20
  serial: true
  plan:
  - get: ((interval))
    trigger: true
  - get: oxygen-mask
  - get: fly
    params: {globs: [fly-linux-amd64.tgz]}
  - task: check-pipeline-returns-known-string
    file: oxygen-mask/ci/run.yml
    params:
      TESTS_TO_RUN: spec/public_pipeline_spec.rb
      ATC_URL: ((atc_url))
      TEAM_NAME: ((team_name))
      PIPELINE_NAME: ((pipeline_name))
      USERNAME: ((username))
      PASSWORD: ((password))
  on_failure: <%= emit_datadog_metric('concourse.view_public_pipeline', 0) %>
  on_success: <%= emit_datadog_metric('concourse.view_public_pipeline', 1) %>

- name: view-build-history
  build_logs_to_retain: 20
  serial: true
  plan:
  - get: ((interval))
    trigger: true
  - get: oxygen-mask
  - get: fly
    params:
      globs: [fly-linux-amd64.tgz]
  - task: check-build-history-is-viewable
    file: oxygen-mask/ci/run.yml
    params:
      TESTS_TO_RUN: spec/build_spec.rb
      ATC_URL: ((atc_url))
      TEAM_NAME: ((team_name))
      PIPELINE_NAME: ((pipeline_name))
      USERNAME: ((username))
      PASSWORD: ((password))
  on_failure: <%= emit_datadog_metric('concourse.view_build_history', 0) %>
  on_success: <%= emit_datadog_metric('concourse.view_build_history', 1) %>

- name: create-and-run-new-pipeline
  build_logs_to_retain: 20
  serial: true
  plan:
  - get: ((interval))
    trigger: true
  - get: fly
    params:
      globs: [fly-linux-amd64.tgz]
  - get: oxygen-mask
  - task: create-and-run-new-pipeline
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/atc-ci

      inputs:
      - name: fly
      - name: oxygen-mask

      params:
        ATC_URL: ((atc_url))
        TEAM_NAME: ((team_name))
        PIPELINE_NAME: ((pipeline_name))
        USERNAME: ((username))
        PASSWORD: ((password))

      run:
        user: root
        path: timeout
        args:
        - 70
        - bash
        - -c
        - |
          #!/bin/bash

          set -e -u -x

          tar -zxf fly/fly-linux-amd64.tgz -C fly/
          install fly/fly /usr/bin/fly

          fly -t ci login -c $ATC_URL -n $TEAM_NAME -u $USERNAME -p $PASSWORD -k || {
              curl "$ATC_URL/api/v1/cli?arch=amd64&platform=linux" --output /tmp/fly

              install /tmp/fly /usr/bin/fly

              fly -t ci login -c $ATC_URL -n $TEAM_NAME -u $USERNAME -p $PASSWORD -k
          }
          fly -t ci sync
          fly -t ci destroy-pipeline -n -p new-pipeline
          fly -t ci set-pipeline -n -p new-pipeline -c oxygen-mask/pipeline.yml
          fly -t ci unpause-pipeline -p new-pipeline

          until [ "$(fly -t ci builds -j new-pipeline/auto-triggering | grep -v pending | wc -l)" -gt 0 ]; do
            echo 'waiting for job to trigger...'
            sleep 1
          done

          fly -t ci watch -j new-pipeline/auto-triggering
          fly -t ci destroy-pipeline -n -p new-pipeline
  on_failure: <%= emit_datadog_metric('concourse.create_and_run_new_pipeline', 0) %>
  on_success: <%= emit_datadog_metric('concourse.create_and_run_new_pipeline', 1) %>
