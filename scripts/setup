#!/bin/bash

set -e

function usage() {
  {
    echo "usage: $0"
    echo "  -t: target of concourse being monitored"
    echo "  -x: target of concourse doing the monitoring"
    echo "  -n: team name user for target above"
    echo "  -u&-p: basic auth username and password for the team above"
    echo "  -d: datadog api key to emit metrics to"
    echo "  -g: github access token to not be rate limited for getting fly CLI"
    echo "  -f: delete the previous pipelines, this help clean up build history"
  } >&2
  exit 1
}

while getopts ":fx:n:t:u:p:d:g:" opt; do
  case $opt in
    n) TEAMNAME="$OPTARG";;
    t) MONITORED_TARGET="$OPTARG";;
    x) MONITORING_TARGET="$OPTARG";;
    u) USERNAME="$OPTARG";;
    p) PASSWORD="$OPTARG";;
    d) DATADOG_API_KEY="$OPTARG";;
    g) ACCESS_TOKEN="$OPTARG";;
    f) DELETE_THE_PIPELINES="true"
  esac
done

PIPELINE_NAME="monitoring"

[ -n "$USERNAME" ] || usage
[ -n "$PASSWORD" ] || usage
[ -n "$MONITORING_TARGET" ] || usage
[ -n "$MONITORED_TARGET" ] || usage

tmpfile=$(mktemp /tmp/oxygen-mask.XXXXXX)
erb monitor.yml > $tmpfile

set -x
if [ -n "$DELETE_THE_PIPELINES" ]; then
  fly -t "$MONITORED_TARGET" destroy-pipeline -n -p "$PIPELINE_NAME"
fi
fly -t "$MONITORED_TARGET" set-pipeline -n -p "$PIPELINE_NAME" -c pipeline.yml -v param="$PIPELINE_NAME"
fly -t "$MONITORED_TARGET" unpause-pipeline -p "$PIPELINE_NAME"
fly -t "$MONITORED_TARGET" expose-pipeline -p "$PIPELINE_NAME"

cmd=(fly -t "$MONITORING_TARGET" set-pipeline -n -p "$PIPELINE_NAME"-stats -c $tmpfile \
  -v atc_url="$(fly targets | grep "$MONITORED_TARGET"  | head -n 1 | awk '{print $2}')" \
  -v interval=30s \
  -v password="$PASSWORD" \
  -v pipeline_name="$PIPELINE_NAME" \
  -v team_name="$TEAMNAME" \
  -v username="$USERNAME")

if [ -n "$ACCESS_TOKEN" ]; then
  cmd+=(-v github_access_token="$ACCESS_TOKEN")
fi
if [ -n "$DATADOG_API_KEY" ]; then
  cmd+=(-v datadog_api_key="$DATADOG_API_KEY")
fi

if [ -n "$DELETE_THE_PIPELINES" ]; then
  fly -t "$MONITORING_TARGET" destroy-pipeline -n -p "$PIPELINE_NAME"-stats
fi
"${cmd[@]}"
fly -t "$MONITORING_TARGET" unpause-pipeline -p "$PIPELINE_NAME"-stats
